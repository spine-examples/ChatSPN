/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine_examples.chatspn.message;

import "spine/options.proto";

option (type_url_prefix) = "type.chatspn.spine.io";
option java_package = "io.spine.examples.chatspn.message.event";
option java_outer_classname = "EditingEventsProto";
option java_multiple_files = true;

import "spine/core/user_id.proto";
import "spine_examples/chatspn/identifiers.proto";

// A message has been edited.
message MessageEdited {

    // The ID of the edited message.
    MessageId id = 1;

    // The ID of the chat in which the message was edited.
    ChatId chat = 2 [(required) = true];

    // The ID of the user who edited the message.
    spine.core.UserId user = 3 [(required) = true];

    // The new text content of the message.
    string content = 4 [(required) = true];
}

// The message failed to be edited.
message MessageEditingFailed {

    // The ID of the message that failed to be edited.
    MessageId id = 1;

    // The ID of the chat in which the message failed to be edited.
    ChatId chat = 2 [(required) = true];

    // The ID of the user who originally asked to edit this message.
    spine.core.UserId user = 3 [(required) = true];

    // The suggested message content.
    string suggested_content = 4 [(required) = true];
}

// The content of the message has been updated.
message MessageContentUpdated {

    // The ID of the message whose content has been updated.
    MessageId id = 1;

    // The ID of the chat in which the message content was updated.
    ChatId chat = 2 [(required) = true];

    // The ID of the user who updated the message content.
    spine.core.UserId user = 3 [(required) = true];

    // The new message text content.
    string content = 4 [(required) = true];
}
