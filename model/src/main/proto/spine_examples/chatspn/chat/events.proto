/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine_examples.chatspn.chat;

import "spine/options.proto";

option (type_url_prefix) = "type.chatspn.spine.io";
option java_package = "io.spine.examples.chatspn.chat.event";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;

import "spine/core/user_id.proto";
import "spine_examples/chatspn/identifiers.proto";

// A new personal chat has been created.
message PersonalChatCreated {

    // The ID of the created chat.
    ChatId id = 1;

    // The user who created the chat.
    spine.core.UserId creator = 2 [(required) = true];

    // The second member into the created personal chat.
    spine.core.UserId member = 3 [(required) = true];
}

// A new group chat has been created.
message GroupChatCreated {

    // The ID of the created chat.
    ChatId id = 1;

    // The user who created the chat.
    spine.core.UserId creator = 2 [(required) = true];

    // Users who are included in the chat as members.
    //
    // This list does not include a `creator`.
    //
    repeated spine.core.UserId member = 3 [(required) = true, (distinct) = true];

    // The name of the created chat.
    string name = 4 [(required) = true];
}

// New members have been added to the chat.
//
// Emitted if at least one new member was added.
//
message MembersAdded {

    // The ID of the chat in which members were added.
    ChatId id = 1;

    // The user who added new members.
    spine.core.UserId who_added = 2 [(required) = true];

    // Users who were added to the chat as members.
    repeated spine.core.UserId member = 3 [(required) = true, (distinct) = true];
}

// Members have been removed from the chat.
//
// Emitted if at least one member was removed.
//
message MembersRemoved {

    // The ID of the chat in which members were removed.
    ChatId id = 1;

    // The user who removed members.
    spine.core.UserId who_removed = 2 [(required) = true];

    // Members remaining in the chat.
    repeated spine.core.UserId remaining_member = 3 [(required) = true, (distinct) = true];
}

// User left the chat.
message UserLeftChat {

    // The ID of the chat the user left.
    ChatId chat = 1;

    // The user who left the chat.
    spine.core.UserId user = 2 [(required) = true];
}

// The last member left the chat.
message LastMemberLeftChat {
    option (is).java_type = "LastMemberLeftChatMixin";

    // The ID of the chat that the last member left.
    ChatId id = 1;

    // The last member who left the chat.
    spine.core.UserId last_member = 2 [(required) = true];
}
