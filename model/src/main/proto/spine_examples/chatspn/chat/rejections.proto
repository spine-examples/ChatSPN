/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine_examples.chatspn.chat;

import "spine/options.proto";

option (type_url_prefix) = "type.chatspn.spine.io";
option java_package = "io.spine.examples.chatspn.chat.rejection";
option java_multiple_files = false;

import "spine/core/user_id.proto";
import "spine/net/email_address.proto";
import "spine_examples/chatspn/identifiers.proto";

// New members cannot be added to this chat.
//
// Emitted when:
// - chat isn't a group;
// - the user who sent the original command, is not a chat member;
// - all users to add already are the chat members. If at least one user can be added as a member,
//   this rejection will not be emitted.
//
message MembersCannotBeAdded {

  // The ID of the chat in which members couldn't be added.
  ChatId id = 1;

  // The user who originally tells to add new members.
  spine.core.UserId who_adds = 2 [(required) = true];

  // The users that were originally suggested to be added to the chat as members.
  repeated spine.core.UserId suggested_member = 3 [(required) = true, (distinct) = true];
}

// Members cannot be removed from this chat.
//
// Emitted when:
// - chat isn't a group;
// - the user who sent the original command, is not a chat owner;
// - all users to remove already aren't the chat members. If at least one member can be removed,
//   this rejection will not be emitted.
//
message MembersCannotBeRemoved {

    // The ID of the chat in which members couldn't be removed.
    ChatId id = 1;

    // The user who originally tells to remove members.
    spine.core.UserId who_removes = 2 [(required) = true];

    // Members who couldn't be removed from the chat.
    repeated spine.core.UserId member = 3 [(required) = true, (distinct) = true];
}

// User cannot leave the chat.
//
// Emitted when:
// - chat isn't a group;
// - the user is already not a chat member.
//
message UserCannotLeaveChat {

    // The ID of the chat from which the user cannot leave.
    ChatId id = 1;

    // The user who originally wanted to leave the chat.
    spine.core.UserId user = 2 [(required) = true];
}
